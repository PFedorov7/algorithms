Глава 5

Хэш-функции

Хеш-функция представляет собой функцию, которая получает строку1 и возвращает число
Хеш-функция должна соответствовать некоторым требованиям:
1. Она должна быть последовательной.
2. Разным словам должны соответствовать разные числа. 

Массивы и списки напрямую отображают­ ся на адреса памяти
Хэш-таблицы пределяют место хранения элементов при помощи хеш-функций.
Хеш-таблицы используют массивы для хранения данных, поэтому при обращении к элементам они не уступают массивам.

value = voted.get("tom")
Функция get возвращает значение, если ключ "tom" присутствует в хеш­ таблице. В противном случае возвращается None.

Примеры:
1. Поиск дубликатов
voted = {}
def check_voter(name):
	if voted.get(name): 
		print "kick them out!"
	else:
		voted[name] = True print "let them vote!"
2. Кэширование
cache = {}
def get_page(url) :
	if cache.get(url):
		return cache[url]
	else:
		data =get_data_from_server(url) 
		cache[url] = data 
		return data


Из этого примера следуют два важных урока:
1. Выбор хеш-функции действительно важен. Хеш-функция, отображаю­ щая все ключи на один элемент массива, никуда не годится. В идеале хеш-функция должна распределять ключи равномерно по всему хешу;
2. Если связанные списки становятся слишком длинными, работа с хеш-таблицей сильно замедляется. Но они не станут слишком длинными при использовании хорошей хеш-функции!

Для предотвращения коллизий необходимы:
1. низкий коэффициент заполнения; 
2. хорошая хеш-функция.

Хеш-таблицы используют массив для хранения данных, поэтому для вы­ числения коэффициента заполнения можно подсчитать количество за­ полненных элементов в массиве.

Хорошая хеш-функция должна обеспечивать равномерное распределение значений в массиве.

Как только коэффициент заполнения превышает 0,7 , пора изменять раз­ мер хеш-таблицы.
Хеш-таблица создается объединением хеш-функции с массивом.